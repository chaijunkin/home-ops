# name: CI Pipeline

# on:
#   push:
#     branches: [main, develop]
#   pull_request:
#     branches: [main]

# env:
#   KUBECONFORM_VERSION: "v0.6.4"
#   HELM_VERSION: "v3.14.0"
#   KUBECTL_VERSION: "v1.29.0"

# jobs:
#   pre-commit:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Install pre-commit
#         run: pip install pre-commit

#       - name: Run pre-commit
#         run: pre-commit run --all-files

#   kubernetes-validation:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install kubeconform
#         run: |
#           curl -L https://github.com/yannh/kubeconform/releases/download/${{ env.KUBECONFORM_VERSION }}/kubeconform-linux-amd64.tar.gz | tar xz
#           sudo mv kubeconform /usr/local/bin

#       - name: Install kubectl
#         run: |
#           curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
#           chmod +x kubectl
#           sudo mv kubectl /usr/local/bin/

#       - name: Validate Kubernetes manifests
#         run: |
#           find kubernetes/ -name "*.yaml" -o -name "*.yml" | \
#           xargs kubeconform -strict -ignore-missing-schemas \
#           -schema-location default \
#           -schema-location "https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json"

#   helm-validation:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install Helm
#         uses: azure/setup-helm@v4
#         with:
#           version: ${{ env.HELM_VERSION }}

#       - name: Add Helm repositories
#         run: |
#           helm repo add bjw-s https://bjw-s.github.io/helm-charts
#           helm repo add grafana https://grafana.github.io/helm-charts
#           helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
#           helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#           helm repo add jetstack https://charts.jetstack.io
#           helm repo update

#       - name: Validate Helm releases
#         run: |
#           find kubernetes/apps/ -name "helmrelease.yaml" | while read file; do
#             echo "Validating $file"
#             # Extract chart name and version from HelmRelease
#             chart=$(yq eval '.spec.chart.spec.chart' "$file" 2>/dev/null || echo "")
#             version=$(yq eval '.spec.chart.spec.version' "$file" 2>/dev/null || echo "")

#             if [[ -n "$chart" && -n "$version" ]]; then
#               echo "Linting $chart version $version"
#               helm lint || true  # Don't fail the build on lint issues
#             fi
#           done

#   terraform-validation:
#     runs-on: ubuntu-latest
#     if: contains(github.event.head_commit.message, 'terraform') || contains(github.event.pull_request.title, 'terraform')
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: "~1.7.0"

#       - name: Terraform Format
#         run: |
#           find infrastructure/terraform/ -name "*.tf" -exec dirname {} \; | sort -u | \
#           xargs -I {} terraform fmt -check=true -diff=true {}

#       - name: Terraform Init & Validate
#         run: |
#           find infrastructure/terraform/ -name "*.tf" -exec dirname {} \; | sort -u | \
#           while read dir; do
#             echo "Validating $dir"
#             (cd "$dir" && terraform init -backend=false && terraform validate)
#           done

#   ansible-validation:
#     runs-on: ubuntu-latest
#     if: contains(github.event.head_commit.message, 'ansible') || contains(github.event.pull_request.title, 'ansible')
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: "3.11"

#       - name: Install Ansible and ansible-lint
#         run: |
#           pip install ansible ansible-lint

#       - name: Run ansible-lint
#         run: |
#           find ansible/ -name "*.yml" -o -name "*.yaml" | xargs ansible-lint

#   security-scan:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: "fs"
#           scan-ref: "."
#           format: "sarif"
#           output: "trivy-results.sarif"

#       - name: Upload Trivy scan results
#         uses: github/codeql-action/upload-sarif@v3
#         if: always()
#         with:
#           sarif_file: "trivy-results.sarif"

#   notify:
#     runs-on: ubuntu-latest
#     needs: [pre-commit, kubernetes-validation, helm-validation]
#     if: always()
#     steps:
#       - name: Report Status
#         run: |
#           if [[ "${{ needs.pre-commit.result }}" == "success" && "${{ needs.kubernetes-validation.result }}" == "success" && "${{ needs.helm-validation.result }}" == "success" ]]; then
#             echo "✅ All CI checks passed!"
#           else
#             echo "❌ Some CI checks failed"
#             exit 1
#           fi
