---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: "${APP}-volsync"
spec:
  target:
    deletionPolicy: Delete
    template:
      type: Opaque
      data:
        RESTIC_REPOSITORY: "{{ .REPOSITORY_TEMPLATE }}/${APP}"
        RESTIC_PASSWORD: "{{ .RESTIC_PASSWORD }}"
        AWS_ACCESS_KEY_ID: "{{ .AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "{{ .AWS_SECRET_ACCESS_KEY }}"
  data:
    - secretKey: REPOSITORY_TEMPLATE
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: 75d679a4-15fc-474b-a8db-aab74209f0ff
        property: restic_endpoint
    - secretKey: RESTIC_PASSWORD
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: 75d679a4-15fc-474b-a8db-aab74209f0ff
        property: restic_password
    - secretKey: AWS_ACCESS_KEY_ID
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: d10ce5c3-ce4b-4f22-9430-b962390e0cba
        property: owner_access_key
    - secretKey: AWS_SECRET_ACCESS_KEY
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: d10ce5c3-ce4b-4f22-9430-b962390e0cba
        property: owner_secret_key
---
apiVersion: volsync.backube/v1alpha1
kind: ReplicationDestination
metadata:
  name: "${APP}-bootstrap"
  labels:
    kustomize.toolkit.fluxcd.io/ssa: IfNotPresent
spec:
  trigger:
    manual: restore-once
  restic:
    repository: "${APP}-volsync"
    copyMethod: "${VOLSYNC_COPYMETHOD:-Snapshot}"
    volumeSnapshotClassName: "${VOLSYNC_SNAPSHOTCLASS:-local-hostpath}"
    cacheStorageClassName: "${VOLSYNC_CACHE_SNAPSHOTCLASS:=openebs-hostpath}"
    cacheAccessModes: ["${VOLSYNC_CACHE_ACCESSMODES:-ReadWriteOnce}"]
    cacheCapacity: "${VOLSYNC_CACHE_CAPACITY:-4Gi}"
    storageClassName: "${VOLSYNC_STORAGECLASS:-local-hostpath}"
    accessModes: ["${VOLSYNC_ACCESSMODES:-ReadWriteOnce}"]
    moverSecurityContext:
      runAsUser: "${VOLSYNC_UID:-2000}"
      runAsGroup: "${VOLSYNC_GID:-2000}"
      fsGroup: "${VOLSYNC_GID:-2000}"
    capacity: "${VOLSYNC_CAPACITY:=2Gi}"
---
apiVersion: volsync.backube/v1alpha1
kind: ReplicationSource
metadata:
  name: "${APP}"
spec:
  sourcePVC: "${VOLSYNC_CLAIM:-${APP}}"
  trigger:
    # previous configuration:
    # schedule: "0 * * * *"
    # changed to run every 8 hours (00:00, 08:00, 16:00)
    schedule: "0 */8 * * *"
  restic:
    copyMethod: "${VOLSYNC_COPYMETHOD:-Snapshot}"
    pruneIntervalDays: 7
    repository: "${APP}-volsync"
    volumeSnapshotClassName: "${VOLSYNC_SNAPSHOTCLASS:-local-hostpath}"
    cacheCapacity: "${VOLSYNC_CACHE_CAPACITY:-8Gi}"
    cacheStorageClassName: "${VOLSYNC_CACHE_SNAPSHOTCLASS:=openebs-hostpath}"
    cacheAccessModes: ["${VOLSYNC_CACHE_ACCESSMODES:-ReadWriteOnce}"]
    storageClassName: "${VOLSYNC_STORAGECLASS:-local-hostpath}"
    accessModes: ["${VOLSYNC_ACCESSMODES:-ReadWriteOnce}"]
    moverSecurityContext:
      runAsUser: "${VOLSYNC_UID:-2000}"
      runAsGroup: "${VOLSYNC_GID:-2000}"
      fsGroup: "${VOLSYNC_GID:-2000}"
    # moverAffinity:
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       - topologyKey: kubernetes.io/hostname
    #         labelSelector:
    #           matchLabels:
    #             app.kubernetes.io/created-by: volsync
    #         namespaceSelector:
    #           matchExpressions:
    #             - key: kubernetes.io/metadata.name
    #               operator: Exists
    # previous retain settings:
    # retain:
    #   hourly: 24
    #   daily: 7
    #   weekly: 5
    # adjusted for 8-hour interval (3 snapshots cover ~24h)
    retain:
      hourly: 3
      daily: 7
      weekly: 5
